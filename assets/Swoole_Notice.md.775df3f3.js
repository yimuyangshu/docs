import{_ as e,o as a,c as t,Q as o}from"./chunks/framework.01af844e.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Swoole/Notice.md","filePath":"Swoole/Notice.md"}'),s={name:"Swoole/Notice.md"},c=o('<h2 id="并发注意事项" tabindex="-1">并发注意事项 <a class="header-anchor" href="#并发注意事项" aria-label="Permalink to &quot;并发注意事项&quot;">​</a></h2><h3 id="cache" tabindex="-1">Cache <a class="header-anchor" href="#cache" aria-label="Permalink to &quot;Cache&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">access_token</p><p>设置access_token缓存有效期1小时,缓存消失时获取最新的token,缓存消失时瞬时并发导致多次获取token,耗光token请求次数</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">读写分离：缓存改为永不过期,另设置一个定时任务/进程,每隔1个小时请求最新token并写入缓存中</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">读写分离：缓存改为永不过期,另设置一个定时任务/进程,每隔1个小时请求最新token并写入缓存中</span></span></code></pre></div></div>',3),n=[c];function l(i,r,p,d,_,h){return a(),t("div",null,n)}const m=e(s,[["render",l]]);export{u as __pageData,m as default};
